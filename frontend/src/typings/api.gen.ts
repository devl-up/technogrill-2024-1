/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * TechnoGrill
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { customInstance } from '../api/mutator/custom-instance';
export interface ProductsQueriesGetProductsDto {
  description: string;
  id: string;
  name: string;
  price: number;
}

export interface ProductsCommandsDeleteProductCommand {
  id: string;
}

export interface ProductsCommandsChangeProductCommand {
  description: string;
  id: string;
  name: string;
  price: number;
}

export interface ProductsCommandsAddProductCommand {
  description: string;
  id: string;
  name: string;
  price: number;
}

export interface OrdersQueriesGetOrderItemDto {
  amount: number;
  id: string;
  productId: string;
  productName: string;
  productPrice: number;
}

export enum OrdersEnumsOrderStatus {
  Pending= 'Pending',
  Approved= 'Approved',
  Declined= 'Declined',

}
export interface OrdersQueriesGetOrdersDto {
  id: string;
  status: OrdersEnumsOrderStatus;
}

export interface OrdersQueriesGetOrderDto {
  id: string;
  items: OrdersQueriesGetOrderItemDto[];
  status: OrdersEnumsOrderStatus;
}

export interface OrdersCommandsDeleteOrderItemCommand {
  id: string;
  itemId: string;
}

export interface OrdersCommandsDeleteOrderCommand {
  id: string;
}

export interface OrdersCommandsDeclineOrderCommand {
  id: string;
}

export interface OrdersCommandsChangeOrderItemAmountCommand {
  amount: number;
  id: string;
  itemId: string;
}

export interface OrdersCommandsApproveOrderCommand {
  id: string;
}

export interface OrdersCommandsAddOrderItemCommand {
  amount: number;
  id: string;
  productId: string;
}

export interface OrdersCommandsAddOrderCommand {
  id: string;
}




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


export const getApiProduct = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductsQueriesGetProductsDto[]>(
      {url: `/api/product`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiProductQueryKey = () => {
    return [`/api/product`] as const;
    }

    
export const getGetApiProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>> = ({ signal }) => getApiProduct(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductQueryError = unknown

export const useGetApiProduct = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiProductQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiProduct = (
    productsCommandsAddProductCommand: ProductsCommandsAddProductCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/product`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productsCommandsAddProductCommand
    },
      options);
    }
  


export const getPostApiProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: ProductsCommandsAddProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: ProductsCommandsAddProductCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProduct>>, {data: ProductsCommandsAddProductCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
    export type PostApiProductMutationBody = ProductsCommandsAddProductCommand
    export type PostApiProductMutationError = unknown

    export const usePostApiProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: ProductsCommandsAddProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const putApiProduct = (
    productsCommandsChangeProductCommand: ProductsCommandsChangeProductCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/product`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productsCommandsChangeProductCommand
    },
      options);
    }
  


export const getPutApiProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProduct>>, TError,{data: ProductsCommandsChangeProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiProduct>>, TError,{data: ProductsCommandsChangeProductCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiProduct>>, {data: ProductsCommandsChangeProductCommand}> = (props) => {
          const {data} = props ?? {};

          return  putApiProduct(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof putApiProduct>>>
    export type PutApiProductMutationBody = ProductsCommandsChangeProductCommand
    export type PutApiProductMutationError = unknown

    export const usePutApiProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiProduct>>, TError,{data: ProductsCommandsChangeProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPutApiProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiProduct = (
    productsCommandsDeleteProductCommand: ProductsCommandsDeleteProductCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/product`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: productsCommandsDeleteProductCommand
    },
      options);
    }
  


export const getDeleteApiProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProduct>>, TError,{data: ProductsCommandsDeleteProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiProduct>>, TError,{data: ProductsCommandsDeleteProductCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiProduct>>, {data: ProductsCommandsDeleteProductCommand}> = (props) => {
          const {data} = props ?? {};

          return  deleteApiProduct(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiProduct>>>
    export type DeleteApiProductMutationBody = ProductsCommandsDeleteProductCommand
    export type DeleteApiProductMutationError = unknown

    export const useDeleteApiProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiProduct>>, TError,{data: ProductsCommandsDeleteProductCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getDeleteApiProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiOrder = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrdersQueriesGetOrdersDto[]>(
      {url: `/api/order`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiOrderQueryKey = () => {
    return [`/api/order`] as const;
    }

    
export const getGetApiOrderQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrder>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrder>>> = ({ signal }) => getApiOrder(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrderQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrder>>>
export type GetApiOrderQueryError = unknown

export const useGetApiOrder = <TData = Awaited<ReturnType<typeof getApiOrder>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrder>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrderQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiOrder = (
    ordersCommandsAddOrderCommand: OrdersCommandsAddOrderCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsAddOrderCommand
    },
      options);
    }
  


export const getPostApiOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrdersCommandsAddOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrdersCommandsAddOrderCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrder>>, {data: OrdersCommandsAddOrderCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrder(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrder>>>
    export type PostApiOrderMutationBody = OrdersCommandsAddOrderCommand
    export type PostApiOrderMutationError = unknown

    export const usePostApiOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrder>>, TError,{data: OrdersCommandsAddOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const deleteApiOrder = (
    ordersCommandsDeleteOrderCommand: OrdersCommandsDeleteOrderCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsDeleteOrderCommand
    },
      options);
    }
  


export const getDeleteApiOrderMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrder>>, TError,{data: OrdersCommandsDeleteOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrder>>, TError,{data: OrdersCommandsDeleteOrderCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiOrder>>, {data: OrdersCommandsDeleteOrderCommand}> = (props) => {
          const {data} = props ?? {};

          return  deleteApiOrder(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiOrderMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiOrder>>>
    export type DeleteApiOrderMutationBody = OrdersCommandsDeleteOrderCommand
    export type DeleteApiOrderMutationError = unknown

    export const useDeleteApiOrder = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiOrder>>, TError,{data: OrdersCommandsDeleteOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getDeleteApiOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiOrderId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrdersQueriesGetOrderDto>(
      {url: `/api/order/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiOrderIdQueryKey = (id: string,) => {
    return [`/api/order/${id}`] as const;
    }

    
export const getGetApiOrderIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiOrderIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiOrderId>>> = ({ signal }) => getApiOrderId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiOrderIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiOrderId>>>
export type GetApiOrderIdQueryError = unknown

export const useGetApiOrderId = <TData = Awaited<ReturnType<typeof getApiOrderId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiOrderId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiOrderIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiOrderAddItem = (
    ordersCommandsAddOrderItemCommand: OrdersCommandsAddOrderItemCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order/add-item`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsAddOrderItemCommand
    },
      options);
    }
  


export const getPostApiOrderAddItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAddItem>>, TError,{data: OrdersCommandsAddOrderItemCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAddItem>>, TError,{data: OrdersCommandsAddOrderItemCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderAddItem>>, {data: OrdersCommandsAddOrderItemCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderAddItem(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderAddItemMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderAddItem>>>
    export type PostApiOrderAddItemMutationBody = OrdersCommandsAddOrderItemCommand
    export type PostApiOrderAddItemMutationError = unknown

    export const usePostApiOrderAddItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAddItem>>, TError,{data: OrdersCommandsAddOrderItemCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderAddItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOrderDeleteItem = (
    ordersCommandsDeleteOrderItemCommand: OrdersCommandsDeleteOrderItemCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order/delete-item`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsDeleteOrderItemCommand
    },
      options);
    }
  


export const getPostApiOrderDeleteItemMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDeleteItem>>, TError,{data: OrdersCommandsDeleteOrderItemCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDeleteItem>>, TError,{data: OrdersCommandsDeleteOrderItemCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderDeleteItem>>, {data: OrdersCommandsDeleteOrderItemCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderDeleteItem(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderDeleteItemMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderDeleteItem>>>
    export type PostApiOrderDeleteItemMutationBody = OrdersCommandsDeleteOrderItemCommand
    export type PostApiOrderDeleteItemMutationError = unknown

    export const usePostApiOrderDeleteItem = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDeleteItem>>, TError,{data: OrdersCommandsDeleteOrderItemCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderDeleteItemMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOrderChangeItemAmount = (
    ordersCommandsChangeOrderItemAmountCommand: OrdersCommandsChangeOrderItemAmountCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order/change-item-amount`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsChangeOrderItemAmountCommand
    },
      options);
    }
  


export const getPostApiOrderChangeItemAmountMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderChangeItemAmount>>, TError,{data: OrdersCommandsChangeOrderItemAmountCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderChangeItemAmount>>, TError,{data: OrdersCommandsChangeOrderItemAmountCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderChangeItemAmount>>, {data: OrdersCommandsChangeOrderItemAmountCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderChangeItemAmount(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderChangeItemAmountMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderChangeItemAmount>>>
    export type PostApiOrderChangeItemAmountMutationBody = OrdersCommandsChangeOrderItemAmountCommand
    export type PostApiOrderChangeItemAmountMutationError = unknown

    export const usePostApiOrderChangeItemAmount = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderChangeItemAmount>>, TError,{data: OrdersCommandsChangeOrderItemAmountCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderChangeItemAmountMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOrderApprove = (
    ordersCommandsApproveOrderCommand: OrdersCommandsApproveOrderCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order/approve`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsApproveOrderCommand
    },
      options);
    }
  


export const getPostApiOrderApproveMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApprove>>, TError,{data: OrdersCommandsApproveOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApprove>>, TError,{data: OrdersCommandsApproveOrderCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderApprove>>, {data: OrdersCommandsApproveOrderCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderApprove(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderApproveMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderApprove>>>
    export type PostApiOrderApproveMutationBody = OrdersCommandsApproveOrderCommand
    export type PostApiOrderApproveMutationError = unknown

    export const usePostApiOrderApprove = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderApprove>>, TError,{data: OrdersCommandsApproveOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderApproveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const postApiOrderDecline = (
    ordersCommandsDeclineOrderCommand: OrdersCommandsDeclineOrderCommand,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/order/decline`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: ordersCommandsDeclineOrderCommand
    },
      options);
    }
  


export const getPostApiOrderDeclineMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDecline>>, TError,{data: OrdersCommandsDeclineOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDecline>>, TError,{data: OrdersCommandsDeclineOrderCommand}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderDecline>>, {data: OrdersCommandsDeclineOrderCommand}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderDecline(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderDeclineMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderDecline>>>
    export type PostApiOrderDeclineMutationBody = OrdersCommandsDeclineOrderCommand
    export type PostApiOrderDeclineMutationError = unknown

    export const usePostApiOrderDecline = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderDecline>>, TError,{data: OrdersCommandsDeclineOrderCommand}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getPostApiOrderDeclineMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
